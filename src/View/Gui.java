/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.*;
import Model.*;
import FileActions.Reader;

import Model.Filter.Satellit.FilterForSatellitName;

import java.io.File;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Thomas Khiem
 */
public class Gui extends javax.swing.JFrame {

    //private List<Satellit> satellitList;
    private Data rawData  = new Data();
    private Data data = new Data();
    private Aggregat aggregat;
    private String fileNameAggregat;
    private String pathAggregat;
    private String filenameOutputType;
    private String pathOutputType;
    /**
     * Creates new form ContactEditorUI
     */
    public Gui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        scrollPlane = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        loadData = new javax.swing.JButton();
        chooseAggregat = new javax.swing.JButton();
        run = new javax.swing.JButton();
        save = new javax.swing.JButton();
        chooseOutput = new javax.swing.JButton();
        filename = new javax.swing.JTextField();
        filenameAggregat = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        outputArea.setEditable(false);
        outputArea.setColumns(20);
        outputArea.setRows(5);
        scrollPlane.setViewportView(outputArea);

        loadData.setText("Load Data");
        loadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataActionPerformed(evt);
            }
        });

        chooseAggregat.setText("Choose Aggregat");
        chooseAggregat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseAggregatActionPerformed(evt);
            }
        });

        run.setText("Filter");
        run.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runActionPerformed(evt);
            }
        });

        save.setText("Save/Show");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        chooseOutput.setText("Choose Output");
        chooseOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseOutputActionPerformed(evt);
            }
        });

        filename.setText("Output Filename");

        filenameAggregat.setText("Aggregat Filename");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(scrollPlane, javax.swing.GroupLayout.PREFERRED_SIZE, 647, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(loadData)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(chooseAggregat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(filenameAggregat)
                                                        .addComponent(chooseOutput))
                                                .addComponent(run)
                                                .addComponent(filename, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(save))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(loadData)
                                                .addGap(18, 18, 18)
                                                .addComponent(chooseAggregat)
                                                .addGap(4, 4, 4)
                                                .addComponent(filenameAggregat, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(11, 11, 11)
                                                .addComponent(run)
                                                .addGap(18, 18, 18)
                                                .addComponent(chooseOutput)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(filename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(save))
                                        .addComponent(scrollPlane, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(30, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>

    private void loadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadDataActionPerformed
     
            JFileChooser c = new JFileChooser();
            c.setAcceptAllFileFilterUsed(false);
            c.setFileFilter(new FileFilter() {

                public String getDescription() {
                    return "JSON Files (*.json)";
                }

                public boolean accept(File f) {
                    if (f.isDirectory()) {
                        return true;
                    } else {
                        String filename = f.getName().toLowerCase();
                        return filename.endsWith(".json");
                    }
                }
            });
            // Demonstrate "Open" dialog:
            int rVal = c.showOpenDialog(Gui.this);
            if (rVal == JFileChooser.APPROVE_OPTION) {
                outputArea.setText(c.getSelectedFile().getName());
               // dir.setText(c.getCurrentDirectory().toString());
                Reader reader = new Reader(c.getCurrentDirectory().toString(),c.getSelectedFile().getName());
                JsonConverter jsonConverter = new JsonConverter();
                Transformer transformer = new Transformer( jsonConverter.convert(reader.readFile()));
                this.rawData.setData(transformer.transform());

            }
            if (rVal == JFileChooser.CANCEL_OPTION) {
                outputArea.setText("You pressed cancel");
                //dir.setText("");
            }
        
        
    }//GEN-LAST:event_LoadDataActionPerformed

    private void chooseAggregatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadAggregatActionPerformed

        JFileChooser c = new JFileChooser();
        c.setAcceptAllFileFilterUsed(false);
        c.setFileFilter(new FileFilter() {

            public String getDescription() {
                return "Aggregat File";
            }

            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    String filename = f.getName().toLowerCase();
                    return filename.endsWith(".java");
                }
            }
        });
        // Demonstrate "Open" dialog:
        int rVal = c.showOpenDialog(Gui.this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            pathAggregat = c.getCurrentDirectory().toString();
            fileNameAggregat = c.getSelectedFile().getName();
            filenameAggregat.setText(fileNameAggregat);
        }


        this.aggregat = new Aggregat(new CompleteFilter(
                new FilterSatellit(new FilterForSatellitName("BulgariaSat-1"),null),
                null,
                null),
                ViewCode.STC, CountCode.no);
        
    }//GEN-LAST:event_loadAggregatActionPerformed

    private void runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runActionPerformed
        // TODO add your handling code here:
        //filter nach Aggregat
        this.data.setData(aggregat.filter(rawData).getData());
        //transform nach Aggregat


    }//GEN-LAST:event_runActionPerformed
    private void chooseOutputActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        JFileChooser c = new JFileChooser();
        c.setAcceptAllFileFilterUsed(false);
        c.setFileFilter(new FileFilter() {

            public String getDescription() {
                return "OutputType File";
            }

            public boolean accept(File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    String filename = f.getName().toLowerCase();
                    return filename.endsWith(".java");
                }
            }
        });
        // Demonstrate "Open" dialog:
        int rVal = c.showOpenDialog(Gui.this);
        if (rVal == JFileChooser.APPROVE_OPTION) {
            pathOutputType = c.getCurrentDirectory().toString();
            filenameOutputType = c.getSelectedFile().getName();
            filename.setText(filenameOutputType);
        }
    }

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        JavaToJson jts = new JavaToJson(data.getData());
        String jsonString = jts.transform(aggregat.getView(), aggregat.getCount());
        /*
        if(outputType.isSelected()){
            //saveReport();

            SaveToFile stf = new SaveToFile();
            stf.useAggregat(outputArea, jsonString);
        } else{
            //outputArea.setText("Output string");
            ShowInGui sig = new ShowInGui();
            sig.useAggregat(outputArea, jsonString);
        }

         */
    }
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton chooseAggregat;
    private javax.swing.JButton chooseOutput;
    private javax.swing.JTextField filename;
    private javax.swing.JTextField filenameAggregat;
    private javax.swing.JButton loadData;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JButton run;
    private javax.swing.JButton save;
    private javax.swing.JScrollPane scrollPlane;
    // End of variables declaration//GEN-END:variables
}
