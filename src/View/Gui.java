/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import OutputAggregat.ShowInGui;
import OutputAggregat.SaveToFile;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.*;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Thomas Khiem
 */
public class Gui extends javax.swing.JFrame {

    /**
     * Creates new form ContactEditorUI
     */
    public Gui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        scrollPlane = new JScrollPane();
        outputArea = new JTextArea();
        loadData = new JButton();
        loadAggregat = new JButton();
        outputType = new JCheckBox();
        run = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        outputArea.setEditable(false);
        outputArea.setColumns(20);
        outputArea.setRows(5);
        scrollPlane.setViewportView(outputArea);

        loadData.setText("Load Data");
        loadData.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                loadDataActionPerformed(evt);
            }
        });

        loadAggregat.setText("Load Aggregat");
        loadAggregat.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                loadAggregatActionPerformed(evt);
            }
        });

        outputType.setText("Output JSON file output.json instead of screen. Attention overwrite");

        run.setText("Run");
        run.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                runActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(8, 8, 8)
                                                .addComponent(outputType)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(run)
                                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(loadData)
                                                .addGap(32, 32, 32)
                                                .addComponent(loadAggregat)
                                                .addGap(117, 117, 117))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(scrollPlane, GroupLayout.PREFERRED_SIZE, 647, GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(scrollPlane, GroupLayout.PREFERRED_SIZE, 287, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(loadData)
                                        .addComponent(loadAggregat)
                                        .addComponent(run)
                                        .addComponent(outputType))
                                .addGap(32, 32, 32))
        );

        outputType.getAccessibleContext().setAccessibleName("Output json file instead of screen");

        pack();
    }// </editor-fold>

    private void loadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadDataActionPerformed
     
            JFileChooser c = new JFileChooser();
            c.setAcceptAllFileFilterUsed(false);
            c.setFileFilter(new FileFilter() {

                public String getDescription() {
                    return "JSON Files (*.json)";
                }

                public boolean accept(File f) {
                    if (f.isDirectory()) {
                        return true;
                    } else {
                        String filename = f.getName().toLowerCase();
                        return filename.endsWith(".json");
                    }
                }
            });
            // Demonstrate "Open" dialog:
            int rVal = c.showOpenDialog(Gui.this);
            if (rVal == JFileChooser.APPROVE_OPTION) {
                outputArea.setText(c.getSelectedFile().getName());
               // dir.setText(c.getCurrentDirectory().toString());
            }
            if (rVal == JFileChooser.CANCEL_OPTION) {
                outputArea.setText("You pressed cancel");
                //dir.setText("");
            }
        
        
    }//GEN-LAST:event_LoadDataActionPerformed

    private void loadAggregatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadAggregatActionPerformed
        // TODO add your handling code here:
          JFileChooser c = new JFileChooser();
            c.setAcceptAllFileFilterUsed(false);
            c.setFileFilter(new FileFilter() {

                public String getDescription() {
                    return "JSON Files (*.json)";
                }

                public boolean accept(File f) {
                    if (f.isDirectory()) {
                        return true;
                    } else {
                        String filename = f.getName().toLowerCase();
                        return filename.endsWith(".json");
                    }
                }
            });
            // Demonstrate "Open" dialog:
            int rVal = c.showOpenDialog(Gui.this);
            if (rVal == JFileChooser.APPROVE_OPTION) {
                outputArea.setText(c.getSelectedFile().getName());
               // dir.setText(c.getCurrentDirectory().toString());
            }
            if (rVal == JFileChooser.CANCEL_OPTION) {
                outputArea.setText("You pressed cancel");
                //dir.setText("");
            }
        
    }//GEN-LAST:event_loadAggregatActionPerformed

    private void runActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runActionPerformed
        // TODO add your handling code here:
        //filter nach Aggregat
        if(outputType.isSelected()){
        //saveReport();
            SaveToFile stf = new SaveToFile();
            stf.useAggregat(outputArea);
        } else{
        //outputArea.setText("Output string");
            ShowInGui sig = new ShowInGui();
            sig.useAggregat(outputArea);
        }
        
    }//GEN-LAST:event_runActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }
/*
    public void saveReport()
{
    saveToFile stf = new saveToFile();
    stf.useAggregat(outputArea);

    outputArea.setText("Saving in file: logKMAX.txt");
    final String content = "TEST";
    final Path path = Paths.get("logKMAX.txt");

    try (
        final BufferedWriter writer = Files.newBufferedWriter(path,
            StandardCharsets.UTF_8, StandardOpenOption.CREATE);
    ) {
        writer.write(content);
        writer.flush();
    }catch(Exception e){
        outputArea.setText("ERROR SAVING FAILED");    }


}*/
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton loadData;
    private javax.swing.JButton loadAggregat;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JCheckBox outputType;
    private javax.swing.JButton run;
    private javax.swing.JScrollPane scrollPlane;
    // End of variables declaration//GEN-END:variables
}
